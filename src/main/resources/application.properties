spring.application.name=demo
spring.datasource.url=jdbc:postgresql://localhost:5432/myapp
spring.datasource.username=postgres
spring.datasource.password=yY257243963aA
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Varsay?lan ayar
server.servlet.context-path=/

# JWT Secret Key (en az 256 bit - 32 karakter olmal?)
jwt.secret=9zcXacDJZLq9w7ifeZN7sCBKwfiTmpzzypHXTI6EkpFCPrd9daBy1eWCGRmiWWUHn3Ec/YFhgppxA7s9WtKb7w==

# JWT Token ge\uFFFDerlilik s\uFFFDresi (15 dakika = 900000 milisaniye)
jwt.expiration=900000

jwt.refreshExpiration=2592000000

# application.properties i\uFFFDinde (veya launch config i\uFFFDinde)
spring.profiles.active=dev

debug=true

# Genel loglama seviyesi
logging.level.root=ERROR

# Kendi package'lar?n i\uFFFDin DEBUG seviyesi
logging.level.com.tendering=DEBUG

# Spring framework loglar?n? azalt
logging.level.org.springframework=WARN
logging.level.org.hibernate=WARN

# Paketler i\uFFFDin \uFFFDzel loglama seviyeleri
logging.level.com.tendering.security=WARN
logging.level.com.tendering.security.jwt=WARN
logging.level.com.tendering.controller=WARN
logging.level.com.tendering.service=WARN

# Log format?
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Server Configuration
server.port=8080

# Multipart File Upload Configuration
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB
spring.servlet.multipart.enabled=true
spring.servlet.multipart.location=${java.io.tmpdir}

# Custom File Upload Properties
file.upload.profile-photos.directory=${user.home}/Documents/JAVA coding/demo/demo/ecommerce-uploads/profile-photos
file.upload.profile-photos.max-size=5242880
file.upload.profile-photos.allowed-extensions=jpg,jpeg,png,gif,webp
file.upload.profile-photos.base-url=http://localhost:8080/api/files/profile-photos

# ? Static URL ayar?
file.upload.profile-photos.static-url=http://localhost:8080/uploads/profile-photos

# Additional useful properties
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=UTC
server.error.include-message=always
spring.messages.encoding=UTF-8
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

# ? Spring Boot static resource ayarlar?
spring.web.resources.cache.cachecontrol.max-age=365d
spring.web.resources.cache.cachecontrol.cache-public=true

# ? Static content compression
server.compression.enabled=true
server.compression.mime-types=image/jpeg,image/png,image/gif,image/webp
server.compression.min-response-size=1024

# Existing configurations...

# Gmail SMTP Configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=ysfgkky51@gmail.com
spring.mail.password=xhey omnr lptn uhis
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Password Reset Configuration
app.password-reset.token-expiry-hours=1
# Do?ru olmas? gereken:
app.frontend.url=http://localhost:8080

# Redis Configuration (Corrected for newer Spring Boot versions)
spring.data.redis.host=localhost
spring.data.redis.port=6379

# OTP Configuration
otp.length=6
otp.expiry-minutes=5
otp.max-attempts=3
otp.rate-limit-minutes=1
otp.session-expiry-minutes=30

# SMS Configuration
sms.provider=firebase
sms.test-mode=true
sms.test-numbers=+905523269951,+905559876543

# Firebase OTP Configuration
firebase.otp.enabled=true
firebase.project-id=send-otp-d8e65